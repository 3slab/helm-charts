apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.service.name }}
spec:
  serviceName: "{{ .Values.service.name }}"
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Values.service.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.service.name }}
    spec:
      # <-- initContainers ici, au mÃªme niveau que containers
      initContainers:
        - name: init-mysql-data
          image: busybox
          command:
            - sh
            - -c
            - |
              mkdir -p /var/lib/mysql/data
              chown -R 999:999 /var/lib/mysql/data
          volumeMounts:
            - name: mysql-data
              mountPath: /var/lib/mysql
      containers:
        - name: mysql
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-root-secret
                  key: MYSQL_ROOT_PASSWORD
          ports:
            - containerPort: 3306
              name: mysql
          args:
            - "--default-authentication-plugin=mysql_native_password"
            - "--character-set-server=utf8mb4"
            - "--collation-server=utf8mb4_unicode_ci"
            - "--datadir=/var/lib/mysql/data"
          volumeMounts:
            - name: mysql-data
              mountPath: /var/lib/mysql
          resources:
{{ toYaml .Values.resources | indent 12 }}
  volumeClaimTemplates:
    - metadata:
        name: mysql-data
      spec:
        accessModes:
          - {{ .Values.persistence.accessMode }}
        resources:
          requests:
            storage: {{ .Values.persistence.size }}
        {{- if .Values.persistence.storageClass }}
        storageClassName: {{ .Values.persistence.storageClass }}
        {{- end }}
